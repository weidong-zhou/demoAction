
name: Python Build and Test

env:
  APP_NAME: foo
  APP_VERSION: bar
  GHCR_REGISTRY: e.g, 'ghcr.io/hello'
  ECR_REGISTRY: e.g, 355097843888.dkr.ecr.ap-southeast-1.amazonaws.com/hello
  # placeholder for readability, override later 

# simple git flow for single developer with linear development  
# release with tag = pyproject.toml versio = $APP_VERSION
on:
  push:
    branches:
      - "*"
    tags:
      - "v*.*.*"
  workflow_dispatch : {}

permissions:
  contents: write
  # need write to push to release artifact 
  packages: write
  # attestations: write
  id-token: write
  # for ghrc 

jobs:
  BuildAndTest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build 

    - name: Build package
      run: python -m build

    - name: project_name
      run: |
        APP_NAME=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["name"])')
        APP_VERSION=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])')
        echo APP_NAME="${APP_NAME}" >> $GITHUB_ENV
        echo APP_VERSION="${APP_VERSION}" >> $GITHUB_ENV
        echo GHCR_REGISTRY="ghcr.io/${{ github.actor }}/${APP_NAME}" >> $GITHUB_ENV
        echo ECR_REGISTRY="355097843888.dkr.ecr.ap-southeast-1.amazonaws.com/${APP_NAME}" >> $GITHUB_ENV

    - name: Setup Test
      run: echo "Hello World" > expected.out

    - name: Run locally 
      run: |
        echo "Run locally"
        pip install dist/${{ env.APP_NAME }}-${{ env.APP_VERSION }}.tar.gz
        echo ==========================================
        python -m ${{ env.APP_NAME }} 
        echo ==========================================

    - name: Unit Test with pytest
      run: |
        pip install pytest 
        (cd src; python -m pytest )

    - name: Test locally 
      run: |
        echo "Test locally"
        python -m ${{ env.APP_NAME }} > local.test.out
        diff local.test.out expected.out

    - name: Build Docker
      run: |
        docker build . -t  ${{ env.APP_NAME }}:${{ github.sha }}  --build-arg APP_VERSION=$APP_VERSION
       
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.APP_NAME }}:${{ github.sha }} 
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'      
        
    - name: Run Docker
      run: |
        echo "Run Docker"
        echo ==========================================
        docker run ${{ env.APP_NAME }}:${{ github.sha }}
        echo ==========================================

    - name: Test Docker 
      run: |
        echo "Test Docker"
        docker run ${{ env.APP_NAME }}:${{ github.sha }} > docker.test.out
        wc docker.test.out expected.out
        diff docker.test.out expected.out

    - name: Upload Build Artifact
      # if push to main or create release
      if: ${{ github.ref != 'refs/heads/main' }} || ${{ github.event_name == 'workflow_dispatch'}} || ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v4.3.3
      with:
        name: ${{ env.APP_NAME }}-python-module
        path: dist/*
        if-no-files-found: error
        overwrite: true

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to ghcr.io
      run: |
        image=${{ env.GHCR_REGISTRY }}:${{ github.sha }}
        docker image tag ${{ env.APP_NAME }}:${{ github.sha }} ${image}
        docker push ${image}

    - name: Push to ECR
      id: ecr_push
      run: |
        image=${{ env.ECR_REGISTRY }}:${{ github.sha }}
        docker image tag ${{ env.APP_NAME }}:${{ github.sha }} ${image}
        docker push ${image}
        echo "image=${image}" >> $GITHUB_OUTPUT
        echo "app=${{ env.APP_NAME }}" >> $GITHUB_OUTPUT

    # Upload to release, reusable workflow. 
    - name: Upload
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      uses: "./.github/workflows/artifact-release.yml"

    #output for passing to next job    
    outputs:
      image: ${{ steps.ecr_push.outputs.image}}
      app: ${{ steps.ecr_push.outputs.app}}

  Deploy_Staging:
    needs : BuildAndTest
    uses: "./.github/workflows/deploy.yml"
    # if: ${{ startsWith(github.ref, 'refs/tags/deploy-v') }} # deply with tag deploy-v*** 
    secrets: inherit
    with: 
      env : 'staging'
      app : ${{ needs.BuildAndTest.outputs.app }}
      image : ${{ needs.BuildAndTest.outputs.image  }}
      cluster: 'staging'
      service: 'hello_svc'
      pods: 0 

  # Deploy_Production:
  #   needs : Deploy_Staging
  #   uses: "./.github/workflows/deploy.yml"
  #   with: 
  #     env : production
  #   if: ${{ startsWith(github.ref, 'refs/tags/deploy-v') }} # deply with tag deploy-v***     